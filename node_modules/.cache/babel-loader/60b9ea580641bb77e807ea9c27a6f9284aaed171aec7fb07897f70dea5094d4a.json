{"ast":null,"code":"// src/utils/codeGenerators/phpGenerator.js\n\nexport function generatePHPCode(diagramData) {\n  const {\n    classes,\n    relationships\n  } = diagramData;\n  const classDefinitions = [];\n  const classNames = getClassNames(classes);\n\n  // Map relationships for associations\n  const associations = getAssociations(relationships, classNames);\n  for (const classId of classes.allIds) {\n    const classData = classes.byId[classId];\n    const baseClass = getBaseClass(classId, relationships, classNames);\n    const attributes = classData.attributes || [];\n    const methods = classData.methods || [];\n    let classDef = `<?php\\n\\nclass ${classData.name} ${baseClass} {\\n`;\n\n    // Auto-increment ID\n    classDef += `    private static $idCounter = 1;\\n`;\n    classDef += `    private $id;\\n`;\n\n    // Attributes\n    for (const attr of attributes) {\n      const accessModifier = attr.access || 'private';\n      classDef += `    ${accessModifier} $${attr.name};\\n`;\n    }\n\n    // Associations\n    const classAssociations = associations[classId] || [];\n    for (const assoc of classAssociations) {\n      const targetClassName = classNames[assoc.targetClassId];\n      classDef += `    private $${assoc.name}; // Association to ${targetClassName}\\n`;\n    }\n\n    // Constructor\n    classDef += `\\n    public function __construct(`;\n    // Constructor parameters\n    const constructorParams = attributes.map(attr => `$${attr.name}`);\n    classDef += constructorParams.join(', ');\n    classDef += `) {\\n`;\n    // Auto-increment ID assignment\n    classDef += `        $this->id = self::$idCounter++;\\n`;\n    // Initialize attributes\n    for (const attr of attributes) {\n      classDef += `        $this->${attr.name} = $${attr.name};\\n`;\n    }\n    // Initialize associations to null\n    for (const assoc of classAssociations) {\n      classDef += `        $this->${assoc.name} = null; // Association to ${classNames[assoc.targetClassId]}\\n`;\n    }\n    classDef += `    }\\n`;\n\n    // Methods\n    for (const method of methods) {\n      const methodSignature = getPHPMethodSignature(method);\n      classDef += `\\n    ${methodSignature} {\\n        // TODO: Implement\\n    }\\n`;\n    }\n    classDef += `}\\n\\n?>`;\n    classDefinitions.push(classDef);\n  }\n  return classDefinitions.join('\\n\\n');\n}\n\n// Helper Functions\n\nfunction getClassNames(classes) {\n  const classNames = {};\n  for (const classId of classes.allIds) {\n    classNames[classId] = classes.byId[classId].name;\n  }\n  return classNames;\n}\nfunction getBaseClass(classId, relationships, classNames) {\n  const inheritance = relationships.allIds.map(relId => relationships.byId[relId]).find(rel => rel.type === 'Inheritance' && rel.sourceClassId === classId);\n  if (inheritance) {\n    return `extends ${classNames[inheritance.targetClassId]}`;\n  } else {\n    return '';\n  }\n}\nfunction getPHPMethodSignature(method) {\n  const accessModifier = method.access || 'public';\n  const params = method.parameters || [];\n  const paramList = params.map(param => `$${param.name}`).join(', ');\n  return `${accessModifier} function ${method.name}(${paramList})`;\n}\nfunction getAssociations(relationships, classNames) {\n  const associations = {};\n  relationships.allIds.map(relId => relationships.byId[relId]).filter(rel => rel.type === 'Association' || rel.type === 'Aggregation' || rel.type === 'Composition').forEach(rel => {\n    if (!associations[rel.sourceClassId]) {\n      associations[rel.sourceClassId] = [];\n    }\n    const name = rel.name || classNames[rel.targetClassId].toLowerCase();\n    associations[rel.sourceClassId].push({\n      targetClassId: rel.targetClassId,\n      name\n    });\n  });\n  return associations;\n}","map":{"version":3,"names":["generatePHPCode","diagramData","classes","relationships","classDefinitions","classNames","getClassNames","associations","getAssociations","classId","allIds","classData","byId","baseClass","getBaseClass","attributes","methods","classDef","name","attr","accessModifier","access","classAssociations","assoc","targetClassName","targetClassId","constructorParams","map","join","method","methodSignature","getPHPMethodSignature","push","inheritance","relId","find","rel","type","sourceClassId","params","parameters","paramList","param","filter","forEach","toLowerCase"],"sources":["C:/Users/Yasser Aitali/Documents/UML_PROJECT/src/utils/codeGenerators/phpGenerator.js"],"sourcesContent":["// src/utils/codeGenerators/phpGenerator.js\r\n\r\nexport function generatePHPCode(diagramData) {\r\n  const { classes, relationships } = diagramData;\r\n  const classDefinitions = [];\r\n  const classNames = getClassNames(classes);\r\n\r\n  // Map relationships for associations\r\n  const associations = getAssociations(relationships, classNames);\r\n\r\n  for (const classId of classes.allIds) {\r\n    const classData = classes.byId[classId];\r\n    const baseClass = getBaseClass(classId, relationships, classNames);\r\n    const attributes = classData.attributes || [];\r\n    const methods = classData.methods || [];\r\n\r\n    let classDef = `<?php\\n\\nclass ${classData.name} ${baseClass} {\\n`;\r\n\r\n    // Auto-increment ID\r\n    classDef += `    private static $idCounter = 1;\\n`;\r\n    classDef += `    private $id;\\n`;\r\n\r\n    // Attributes\r\n    for (const attr of attributes) {\r\n      const accessModifier = attr.access || 'private';\r\n      classDef += `    ${accessModifier} $${attr.name};\\n`;\r\n    }\r\n\r\n    // Associations\r\n    const classAssociations = associations[classId] || [];\r\n    for (const assoc of classAssociations) {\r\n      const targetClassName = classNames[assoc.targetClassId];\r\n      classDef += `    private $${assoc.name}; // Association to ${targetClassName}\\n`;\r\n    }\r\n\r\n    // Constructor\r\n    classDef += `\\n    public function __construct(`;\r\n    // Constructor parameters\r\n    const constructorParams = attributes.map((attr) => `$${attr.name}`);\r\n    classDef += constructorParams.join(', ');\r\n    classDef += `) {\\n`;\r\n    // Auto-increment ID assignment\r\n    classDef += `        $this->id = self::$idCounter++;\\n`;\r\n    // Initialize attributes\r\n    for (const attr of attributes) {\r\n      classDef += `        $this->${attr.name} = $${attr.name};\\n`;\r\n    }\r\n    // Initialize associations to null\r\n    for (const assoc of classAssociations) {\r\n      classDef += `        $this->${assoc.name} = null; // Association to ${classNames[assoc.targetClassId]}\\n`;\r\n    }\r\n    classDef += `    }\\n`;\r\n\r\n    // Methods\r\n    for (const method of methods) {\r\n      const methodSignature = getPHPMethodSignature(method);\r\n      classDef += `\\n    ${methodSignature} {\\n        // TODO: Implement\\n    }\\n`;\r\n    }\r\n\r\n    classDef += `}\\n\\n?>`;\r\n    classDefinitions.push(classDef);\r\n  }\r\n\r\n  return classDefinitions.join('\\n\\n');\r\n}\r\n\r\n// Helper Functions\r\n\r\nfunction getClassNames(classes) {\r\n  const classNames = {};\r\n  for (const classId of classes.allIds) {\r\n    classNames[classId] = classes.byId[classId].name;\r\n  }\r\n  return classNames;\r\n}\r\n\r\nfunction getBaseClass(classId, relationships, classNames) {\r\n  const inheritance = relationships.allIds\r\n    .map((relId) => relationships.byId[relId])\r\n    .find(\r\n      (rel) =>\r\n        rel.type === 'Inheritance' && rel.sourceClassId === classId\r\n    );\r\n  if (inheritance) {\r\n    return `extends ${classNames[inheritance.targetClassId]}`;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction getPHPMethodSignature(method) {\r\n  const accessModifier = method.access || 'public';\r\n  const params = method.parameters || [];\r\n  const paramList = params.map((param) => `$${param.name}`).join(', ');\r\n  return `${accessModifier} function ${method.name}(${paramList})`;\r\n}\r\n\r\nfunction getAssociations(relationships, classNames) {\r\n  const associations = {};\r\n  relationships.allIds\r\n    .map((relId) => relationships.byId[relId])\r\n    .filter((rel) => rel.type === 'Association' || rel.type === 'Aggregation' || rel.type === 'Composition')\r\n    .forEach((rel) => {\r\n      if (!associations[rel.sourceClassId]) {\r\n        associations[rel.sourceClassId] = [];\r\n      }\r\n      const name = rel.name || classNames[rel.targetClassId].toLowerCase();\r\n      associations[rel.sourceClassId].push({\r\n        targetClassId: rel.targetClassId,\r\n        name,\r\n      });\r\n    });\r\n  return associations;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}