{"ast":null,"code":"// src/utils/codeGenerators/pythonGenerator.js\n\nexport function generatePythonCode(diagramData) {\n  const {\n    classes,\n    relationships\n  } = diagramData;\n  const classDefinitions = [];\n  const classNames = getClassNames(classes);\n\n  // Map relationships for associations\n  const associations = getAssociations(relationships);\n  for (const classId of classes.allIds) {\n    const classData = classes.byId[classId];\n    const baseClasses = getBaseClasses(classId, relationships, classNames);\n    const attributes = classData.attributes || [];\n    const methods = classData.methods || [];\n    let classDef = `class ${classData.name}${baseClasses}:\\n`;\n\n    // Auto-increment ID\n    classDef += `    _id_counter = 1\\n\\n`;\n\n    // Constructor\n    classDef += `    def __init__(self`;\n    // Include parameters for attributes\n    const constructorParams = attributes.map(attr => attr.name);\n    if (constructorParams.length > 0) {\n      classDef += `, ${constructorParams.join(', ')}`;\n    }\n    classDef += `):\\n`;\n\n    // Auto-increment ID assignment\n    classDef += `        self.id = ${classData.name}._id_counter\\n`;\n    classDef += `        ${classData.name}._id_counter += 1\\n`;\n\n    // Initialize attributes\n    for (const attr of attributes) {\n      const attrName = getPythonAttributeName(attr);\n      classDef += `        self.${attrName} = ${attr.name}\\n`;\n    }\n\n    // Initialize associations\n    const classAssociations = associations[classId] || [];\n    for (const assoc of classAssociations) {\n      const targetClassName = classNames[assoc.targetClassId];\n      classDef += `        self.${assoc.name} = None  # Association to ${targetClassName}\\n`;\n    }\n\n    // Methods\n    for (const method of methods) {\n      const methodSignature = getPythonMethodSignature(method);\n      classDef += `\\n    ${methodSignature}\\n        pass\\n`;\n    }\n    classDefinitions.push(classDef);\n  }\n  return classDefinitions.join('\\n\\n');\n}\n\n// Helper Functions\n\nfunction getClassNames(classes) {\n  const classNames = {};\n  for (const classId of classes.allIds) {\n    classNames[classId] = classes.byId[classId].name;\n  }\n  return classNames;\n}\nfunction getBaseClasses(classId, relationships, classNames) {\n  const inheritances = relationships.allIds.map(relId => relationships.byId[relId]).filter(rel => rel.type === 'Inheritance' && rel.sourceClassId === classId);\n  if (inheritances.length > 0) {\n    const baseClassNames = inheritances.map(rel => classNames[rel.targetClassId]);\n    return `(${baseClassNames.join(', ')})`;\n  } else {\n    return '';\n  }\n}\nfunction getPythonAttributeName(attr) {\n  switch (attr.access) {\n    case 'private':\n      return `__${attr.name}`;\n    case 'protected':\n      return `_${attr.name}`;\n    default:\n      return attr.name;\n  }\n}\nfunction getPythonMethodSignature(method) {\n  const methodName = method.name;\n  const params = method.parameters || [];\n  const paramNames = params.map(param => param.name);\n  return `def ${methodName}(self${paramNames.length > 0 ? ', ' + paramNames.join(', ') : ''}):`;\n}\nfunction getAssociations(relationships) {\n  const associations = {};\n  relationships.allIds.map(relId => relationships.byId[relId]).filter(rel => rel.type === 'Association' || rel.type === 'Aggregation' || rel.type === 'Composition').forEach(rel => {\n    if (!associations[rel.sourceClassId]) {\n      associations[rel.sourceClassId] = [];\n    }\n    associations[rel.sourceClassId].push({\n      targetClassId: rel.targetClassId,\n      name: rel.name || `assoc_${rel.targetClassId}`\n    });\n  });\n  return associations;\n}","map":{"version":3,"names":["generatePythonCode","diagramData","classes","relationships","classDefinitions","classNames","getClassNames","associations","getAssociations","classId","allIds","classData","byId","baseClasses","getBaseClasses","attributes","methods","classDef","name","constructorParams","map","attr","length","join","attrName","getPythonAttributeName","classAssociations","assoc","targetClassName","targetClassId","method","methodSignature","getPythonMethodSignature","push","inheritances","relId","filter","rel","type","sourceClassId","baseClassNames","access","methodName","params","parameters","paramNames","param","forEach"],"sources":["C:/Users/Yasser Aitali/Documents/UML_PROJECT/src/utils/codeGenerators/pythonGenerator.js"],"sourcesContent":["// src/utils/codeGenerators/pythonGenerator.js\r\n\r\nexport function generatePythonCode(diagramData) {\r\n  const { classes, relationships } = diagramData;\r\n  const classDefinitions = [];\r\n  const classNames = getClassNames(classes);\r\n\r\n  // Map relationships for associations\r\n  const associations = getAssociations(relationships);\r\n\r\n  for (const classId of classes.allIds) {\r\n    const classData = classes.byId[classId];\r\n    const baseClasses = getBaseClasses(classId, relationships, classNames);\r\n    const attributes = classData.attributes || [];\r\n    const methods = classData.methods || [];\r\n\r\n    let classDef = `class ${classData.name}${baseClasses}:\\n`;\r\n\r\n    // Auto-increment ID\r\n    classDef += `    _id_counter = 1\\n\\n`;\r\n\r\n    // Constructor\r\n    classDef += `    def __init__(self`;\r\n    // Include parameters for attributes\r\n    const constructorParams = attributes.map((attr) => attr.name);\r\n    if (constructorParams.length > 0) {\r\n      classDef += `, ${constructorParams.join(', ')}`;\r\n    }\r\n    classDef += `):\\n`;\r\n\r\n    // Auto-increment ID assignment\r\n    classDef += `        self.id = ${classData.name}._id_counter\\n`;\r\n    classDef += `        ${classData.name}._id_counter += 1\\n`;\r\n\r\n    // Initialize attributes\r\n    for (const attr of attributes) {\r\n      const attrName = getPythonAttributeName(attr);\r\n      classDef += `        self.${attrName} = ${attr.name}\\n`;\r\n    }\r\n\r\n    // Initialize associations\r\n    const classAssociations = associations[classId] || [];\r\n    for (const assoc of classAssociations) {\r\n      const targetClassName = classNames[assoc.targetClassId];\r\n      classDef += `        self.${assoc.name} = None  # Association to ${targetClassName}\\n`;\r\n    }\r\n\r\n    // Methods\r\n    for (const method of methods) {\r\n      const methodSignature = getPythonMethodSignature(method);\r\n      classDef += `\\n    ${methodSignature}\\n        pass\\n`;\r\n    }\r\n\r\n    classDefinitions.push(classDef);\r\n  }\r\n\r\n  return classDefinitions.join('\\n\\n');\r\n}\r\n\r\n// Helper Functions\r\n\r\nfunction getClassNames(classes) {\r\n  const classNames = {};\r\n  for (const classId of classes.allIds) {\r\n    classNames[classId] = classes.byId[classId].name;\r\n  }\r\n  return classNames;\r\n}\r\n\r\nfunction getBaseClasses(classId, relationships, classNames) {\r\n  const inheritances = relationships.allIds\r\n    .map((relId) => relationships.byId[relId])\r\n    .filter(\r\n      (rel) =>\r\n        rel.type === 'Inheritance' && rel.sourceClassId === classId\r\n    );\r\n  if (inheritances.length > 0) {\r\n    const baseClassNames = inheritances.map(\r\n      (rel) => classNames[rel.targetClassId]\r\n    );\r\n    return `(${baseClassNames.join(', ')})`;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction getPythonAttributeName(attr) {\r\n  switch (attr.access) {\r\n    case 'private':\r\n      return `__${attr.name}`;\r\n    case 'protected':\r\n      return `_${attr.name}`;\r\n    default:\r\n      return attr.name;\r\n  }\r\n}\r\n\r\nfunction getPythonMethodSignature(method) {\r\n  const methodName = method.name;\r\n  const params = method.parameters || [];\r\n  const paramNames = params.map((param) => param.name);\r\n  return `def ${methodName}(self${paramNames.length > 0 ? ', ' + paramNames.join(', ') : ''}):`;\r\n}\r\n\r\nfunction getAssociations(relationships) {\r\n  const associations = {};\r\n  relationships.allIds\r\n    .map((relId) => relationships.byId[relId])\r\n    .filter((rel) => rel.type === 'Association' || rel.type === 'Aggregation' || rel.type === 'Composition')\r\n    .forEach((rel) => {\r\n      if (!associations[rel.sourceClassId]) {\r\n        associations[rel.sourceClassId] = [];\r\n      }\r\n      associations[rel.sourceClassId].push({\r\n        targetClassId: rel.targetClassId,\r\n        name: rel.name || `assoc_${rel.targetClassId}`,\r\n      });\r\n    });\r\n  return associations;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}