{"ast":null,"code":"const initialState = {\n  byId: {},\n  allIds: []\n};\nexport default function classesReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_CLASS':\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: action.payload\n        },\n        allIds: [...state.allIds, action.payload.id]\n      };\n    case 'UPDATE_CLASS_POSITION':\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            position: {\n              x: action.payload.x,\n              y: action.payload.y\n            }\n          }\n        }\n      };\n    case 'UPDATE_CLASS_NAME':\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            name: action.payload.name\n          }\n        }\n      };\n    case 'DELETE_CLASS':\n      const {\n        [action.payload.id]: deletedClass,\n        ...restClasses\n      } = state.byId;\n      return {\n        ...state,\n        byId: restClasses,\n        allIds: state.allIds.filter(id => id !== action.payload.id)\n      };\n\n    // Attributes\n    case 'ADD_ATTRIBUTE':\n      {\n        const {\n          classId,\n          attribute\n        } = action.payload;\n        const updatedClass = {\n          ...state.byId[classId],\n          attributes: [...state.byId[classId].attributes, attribute]\n        };\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: updatedClass\n          }\n        };\n      }\n    case 'UPDATE_ATTRIBUTE':\n      {\n        const {\n          classId,\n          attributeId,\n          updates\n        } = action.payload;\n        const updatedAttributes = state.byId[classId].attributes.map(attr => attr.id === attributeId ? {\n          ...attr,\n          ...updates\n        } : attr);\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: {\n              ...state.byId[classId],\n              attributes: updatedAttributes\n            }\n          }\n        };\n      }\n    case 'DELETE_ATTRIBUTE':\n      {\n        const {\n          classId,\n          attributeId\n        } = action.payload;\n        const updatedAttributes = state.byId[classId].attributes.filter(attr => attr.id !== attributeId);\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: {\n              ...state.byId[classId],\n              attributes: updatedAttributes\n            }\n          }\n        };\n      }\n\n    // Methods\n    case 'ADD_METHOD':\n      {\n        const {\n          classId,\n          method\n        } = action.payload;\n        const updatedClass = {\n          ...state.byId[classId],\n          methods: [...state.byId[classId].methods, method]\n        };\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: updatedClass\n          }\n        };\n      }\n    case 'UPDATE_METHOD':\n      {\n        const {\n          classId,\n          methodId,\n          updates\n        } = action.payload;\n        const updatedMethods = state.byId[classId].methods.map(method => method.id === methodId ? {\n          ...method,\n          ...updates\n        } : method);\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: {\n              ...state.byId[classId],\n              methods: updatedMethods\n            }\n          }\n        };\n      }\n    case 'DELETE_METHOD':\n      {\n        const {\n          classId,\n          methodId\n        } = action.payload;\n        const updatedMethods = state.byId[classId].methods.filter(method => method.id !== methodId);\n        return {\n          ...state,\n          byId: {\n            ...state.byId,\n            [classId]: {\n              ...state.byId[classId],\n              methods: updatedMethods\n            }\n          }\n        };\n      }\n    case 'IMPORT_DIAGRAM':\n      return action.payload.classes;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["initialState","byId","allIds","classesReducer","state","action","type","payload","id","position","x","y","name","deletedClass","restClasses","filter","classId","attribute","updatedClass","attributes","attributeId","updates","updatedAttributes","map","attr","method","methods","methodId","updatedMethods","classes"],"sources":["C:/Users/Yasser Aitali/Documents/UML_PROJECT/src/redux/reducers/classesReducer.js"],"sourcesContent":["const initialState = {\r\n  byId: {},\r\n  allIds: [],\r\n};\r\n\r\nexport default function classesReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'ADD_CLASS':\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [action.payload.id]: action.payload,\r\n        },\r\n        allIds: [...state.allIds, action.payload.id],\r\n      };\r\n    case 'UPDATE_CLASS_POSITION':\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [action.payload.id]: {\r\n            ...state.byId[action.payload.id],\r\n            position: { x: action.payload.x, y: action.payload.y },\r\n          },\r\n        },\r\n      };\r\n    case 'UPDATE_CLASS_NAME':\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [action.payload.id]: {\r\n            ...state.byId[action.payload.id],\r\n            name: action.payload.name,\r\n          },\r\n        },\r\n      };\r\n    case 'DELETE_CLASS':\r\n      const { [action.payload.id]: deletedClass, ...restClasses } = state.byId;\r\n      return {\r\n        ...state,\r\n        byId: restClasses,\r\n        allIds: state.allIds.filter((id) => id !== action.payload.id),\r\n      };\r\n\r\n\r\n    // Attributes\r\n    case 'ADD_ATTRIBUTE': {\r\n      const { classId, attribute } = action.payload;\r\n      const updatedClass = {\r\n        ...state.byId[classId],\r\n        attributes: [...state.byId[classId].attributes, attribute],\r\n      };\r\n      return {\r\n        ...state,\r\n        byId: { ...state.byId, [classId]: updatedClass },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_ATTRIBUTE': {\r\n      const { classId, attributeId, updates } = action.payload;\r\n      const updatedAttributes = state.byId[classId].attributes.map((attr) =>\r\n        attr.id === attributeId ? { ...attr, ...updates } : attr\r\n      );\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [classId]: { ...state.byId[classId], attributes: updatedAttributes },\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'DELETE_ATTRIBUTE': {\r\n      const { classId, attributeId } = action.payload;\r\n      const updatedAttributes = state.byId[classId].attributes.filter(\r\n        (attr) => attr.id !== attributeId\r\n      );\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [classId]: { ...state.byId[classId], attributes: updatedAttributes },\r\n        },\r\n      };\r\n    }\r\n\r\n    // Methods\r\n    case 'ADD_METHOD': {\r\n      const { classId, method } = action.payload;\r\n      const updatedClass = {\r\n        ...state.byId[classId],\r\n        methods: [...state.byId[classId].methods, method],\r\n      };\r\n      return {\r\n        ...state,\r\n        byId: { ...state.byId, [classId]: updatedClass },\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_METHOD': {\r\n      const { classId, methodId, updates } = action.payload;\r\n      const updatedMethods = state.byId[classId].methods.map((method) =>\r\n        method.id === methodId ? { ...method, ...updates } : method\r\n      );\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [classId]: { ...state.byId[classId], methods: updatedMethods },\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'DELETE_METHOD': {\r\n      const { classId, methodId } = action.payload;\r\n      const updatedMethods = state.byId[classId].methods.filter(\r\n        (method) => method.id !== methodId\r\n      );\r\n      return {\r\n        ...state,\r\n        byId: {\r\n          ...state.byId,\r\n          [classId]: { ...state.byId[classId], methods: updatedMethods },\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'IMPORT_DIAGRAM':\r\n      return action.payload.classes;\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}